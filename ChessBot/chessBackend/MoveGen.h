#pragma once
#include "MoveEval.cpp"
namespace chessBackend {
    class MoveGenerator {
    private:
        enum slider {
            rook = 1,
            bishop = 2,
            queen = 3
        };

        const uint64_t rookMagics[64] = {
            36029347179544576, //12, 4095
            18015085705297984, //11, 2047
            4620702151751042064, //12, 3147
            72059934801659920, //12, 3887
            36041991292748050, //11, 2047
            72061992756708096, //11, 2047
            2377905422204961024, //11, 2047
            4503672641823816, //13, 6354
            72620683611357446, //11, 2047
            576602040621342720, //10, 1022
            281612432445504, //10, 1023
            4614219396868473088, //10, 1023
            4756364174072762401, //10, 1023
            576602039614702080, //10, 1022
            4630263457160232968, //10, 1023
            140772947002112, //11, 2047
            37295984172089344, //11, 2047
            580964626846457857, //10, 1023
            291371118235713, //10, 1023
            1153486654121459752, //10, 1023
            9230268723607119872, //10, 1023
            1441293168069837312, //10, 1022
            18300271551711312, //10, 1023
            9223372174365067296, //12, 2147
            70439611146370, //11, 2046
            10412392709380644864, //10, 1022
            17594335625344, //10, 1022
            4507998751819776, //10, 1022
            4611694816668156032, //10, 1022
            45040396467830912, //10, 1022
            288232577330839808, //10, 1022
            1144600195522692,  //11, 2046  - 31
            354595268199763, //11, 2046  - 32
            141012374659072, //10, 1022  - 33
            9277556176071958528, //10, 1023 - 34
            3026561954832451584, //10, 1023
            140771856491520, //10, 1023
            1173258350851269124, //11, 1119
            1144076812419585, //10, 1023
            5631990648799361, //11, 2047
            9295500001787019264, //11, 2047  - 40
            9362384468967456, //10, 1023
            211250148147216, //10, 1023
            76578790148472842, //10, 1023
            9241395231742558244, //10, 1023  - 44
            2533291970854914, //10, 1023
            9516185247298617377, //10, 1023  - 46
            10376333195019943937, //11, 2046
            1152956963865235584, //11, 2046
            342273709388070944, //10, 1022 - 49
            2315729819927576704, //10, 1023
            1170944699477819520, //10, 1022
            1262138196972569216, //10, 1023
            2342012827193311360, //10, 1023
            1135898625313792, //10, 1023
            5508899554816, //11, 2047
            18861305966661762, //12, 4095  - 56
            576498139994817858, //11, 2047
            1197368437374985, //11, 2047
            9223389629108461825, //11, 2047
            9232660882885185539, //11, 2047
            9223654104604084225, //11, 2047  - 61
            1127622222827532, //11, 2047
            9223374390501638530 //12, 4095  - 63
        };

        const uint64_t bishopMagics[64] = {
            4612973065581690880, //5, 30 - 0
            1418404651336458, //4, 15
            74100778700511233, //5, 29
            573953659634816, //5, 30
            299342040662016, //5, 30
            2380249172990240896, //5, 28
            24933942473785997, //4, 14
            306405305775620098, //5, 31
            9223387224131993612, //4, 15 - 8
            10239265079296, //4, 15
            864838497385583624, //5, 26
            39861761343488, //5, 30
            81070364537390088, //5, 30
            73185796097638400, //5, 29
            28759707025440, //4, 15 - 14
            1181518872576, //4, 15
            289919363586195524, //5, 29 - 16
            4928167949172752, //5, 31
            1143500817433096, // 7, 126
            1126071774742528, //7, 126
            281509873844224, //7, 126
            282575034138624, //7, 126
            6919890781906927936, //5, 28
            27120700011618369, //5, 29
            571746589639680, //5, 30 - 24
            9223618361903293456, //5, 30
            1128099198541897, //126, 7
            1190084997692917000, //510, 9
            140876034736193, //510, 9
            4521466699730946, //126, 7
            1441754460410937608, //5, 30 - 30
            73202220547473512, //5, 30
            3531028956840009864, //5, 30
            292914435273589248, //5, 30
            22007412557828, //7, 126
            145874441174286848, //9, 510 - 35
            576533320607858816,//9, 510 - 36
            282591819334144, //7, 126
            1153141409099944482, //5, 30
            2305952995818375712, //5, 30
            79302553011712, //5, 28 - 40
            11150322303984, //5, 26
            9088419234304, //7, 126
            69860335648,//7, 126
            4400227618848,//7, 126
            563568705544448,//7, 126 - 45
            18302504995389546, //5, 27
            36170363469583600, //5, 29
            614745816137859096, //4, 15
            558482063368, //4, 15
            37154734641447168, //5, 27 - 50
            545783816, //5, 30
            17725260032, //5, 30
            1392739387428641152, //5, 27
            9003413424144, //4, 15
            7868951650304, //4, 15 - 55
            283736563840, //5, 31
            9077607778486016, //4, 13
            9571661318194720, //4, 26
            4325888, //5, 30
            69239328, //5, 30 - 60
            576465155181985976, //5, 26
            43050895568, //4, 15
            9871895344487444992 //5, 30
        };

        std::vector<uint64_t> precompRookMoves[64];
        std::vector<uint64_t> precompBishopMoves[64];

        uint64_t precompPowOfTwo[64];
        uint64_t precompKnightMoves[64];
        uint64_t precompKingMoves[64];
        uint64_t precompWhitePawnMoves[64];
        uint64_t precompBlackPawnMoves[64];
        uint64_t emptyRookMoves[64];
        uint64_t emptyBishopMoves[64];

        bool isKingChecked = 0;
        bool movingPlayer = 1;

        std::vector<Move> pawnMoves[64];
        std::vector<Move> knightMoves[64];
        std::vector<Move> bishopMoves[64];
        std::vector<Move> rookMoves[64];
        std::vector<Move> queenMoves[64];
        std::vector<Move> kingMoves[64];
        std::vector<Move> captures[64];
        std::vector<Move> checks[64];

        void genCaptures();
        void genChecks();
        void genMoves();
        Move bestMove;

        inline uint8_t MoveGenerator::getMagicShift(const uint64_t& blockers, const uint8_t& square) {
            return 64 - (blockers >> 60);
        }

        inline uint64_t MoveGenerator::getIndexToShift(const uint64_t& blockers, const uint64_t& magicNumber) {
            return ((blockers * magicNumber) << 4) >> 4;
        }

    public:
        inline uint64_t genSliderMoves(const uint64_t& blockers, const uint8_t& square, const slider& piece);
        Move getBestMove(const uint8_t& searchDepth);
        MoveGenerator();
        MoveGenerator(const Position& position, bool movingPlayer);
        MoveGenerator(const Position& position, bool movingPlayer, bool isKingChecked);
        ~MoveGenerator();
    };
}